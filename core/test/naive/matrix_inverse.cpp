#include "core/op/naive/ops.h"
#include "core/test/common/factory.h"
#include "core/test/common/utils.h"
#include "gtest/gtest.h"

using namespace nncore;
using namespace test;
using namespace opr;
using namespace opr::naive;

using F = NDArrayFactory;
using Param = param::matrix_inverse;

TEST(Naive, MatrixInverse) {
  OpBase* oprs = OpNaiveImpl::get_instance();

  // Group 1
  Tensor inp1 =
      F::from_list({6.2996088981373095, 15.529909411050966, 9.973696009883838,
                    13.604419859345294, 6.161445203564428, 11.872054322398043,
                    11.178819369551027, 5.762576199891843, 7.840890251608803},
                   {3, 3}, dtype::Float64());
  Tensor truth1 = F::from_list(
      {-0.05392654626015786, -0.17247493499143246, 0.3297430130719682,
       0.069867543619792, -0.16658791159810454, 0.16336194664421153,
       0.025535120303034797, 0.36833083819999024, -0.4626417576063726},
      {3, 3}, dtype::Float64());
  Param p1;

  Tensor pred1;
  ASSERT_TRUE(oprs->matrix_inverse(inp1, pred1, p1).is_ok());
  assert_same_data<nn_float64>(pred1, truth1, 0.0001f);

  // Group 2
  Tensor inp2 = F::from_list(
      {11.224801758562354,   14.41416893509421,  4.078127530814076,
       11.527661693024209,   19.948184732143392, 0.46077839357636874,
       14.716730386766848,   16.89504351310734,  14.038969253487672,
       18.103388548238403,   18.4767215732879,   16.242950035265963,
       9.926569627690473,    2.1653071830249027, 1.659659966235254,
       1.9983148345568957,   14.438131441919431, 12.067212597776892,
       6.4109934485673765,   2.1506976676348244, 7.89880490094526,
       4.282743906051074,    4.354109170045954,  15.564372519542466,
       15.064077173959177,   5.490566807511515,  18.983511731385963,
       6.227823019976782,    9.378840180869146,  13.245736640688573,
       8.175816558089517,    8.501453185684705,  7.718413714716974,
       11.25051526015769,    2.465472641360016,  11.605845550447809,
       0.5039240165978454,   8.578240296130923,  0.1408098242713307,
       15.120068206066025,   5.102632123037562,  11.853811041048763,
       0.051726871443027456, 10.798871849199262, 5.319865892458293,
       13.288271852198505,   3.3851467146239655, 14.109638596530258},
      {3, 4, 4}, dtype::Float64());
  Tensor truth2 = F::from_list(
      {-0.007869224564088591, -0.0010883024391001644, -0.008523749627726713,
       0.12388013673352963,   0.02408106019518925,    -0.05248807449743977,
       0.033750699988019085,  0.030515238539400233,   -0.10760679868109962,
       -0.009250500089678336, 0.08321225384347562,    0.022583974415004166,
       0.10236735736737716,   0.06996324949349707,    -0.06333991179114414,
       -0.16677121163604855,  0.12177735136477986,    0.052668831250890134,
       0.0023235128729524918, -0.12893489834324792,   -0.013417508878936899,
       -0.04852261376613278,  -0.035150625716002866,  0.11797899669893892,
       -0.08113665685413295,  -0.048941346154906244,  0.06409627950022707,
       0.06317290292872138,   -0.03541125240167102,   0.06456315979502113,
       -0.009437839202481294, 0.015297504704594114,   0.32022260642331757,
       0.004368936792535851,  -0.046226860643948174,  -0.2327001338591773,
       -0.2655725226528194,   -0.12903780101602638,   0.21055934847278743,
       0.19557202639793922,   -0.04605783221338342,   -0.08378540254487664,
       -0.2729971243530408,   0.336609759123423,      0.14042677715830285,
       0.13998041749459614,   -0.11537601296661658,   -0.10633540739655928},
      {3, 4, 4}, dtype::Float64());
  Param p2;

  Tensor pred2;
  ASSERT_TRUE(oprs->matrix_inverse(inp2, pred2, p2).is_ok());
  assert_same_data<nn_float64>(pred2, truth2, 0.0001f);
}