#include "core/base/include/tensor.h"
#include "core/op/naive/ops.h"
#include "core/test/common/checker.h"
#include "core/test/common/factory.h"
#include "core/test/common/utils.h"
#include "gtest/gtest.h"

using namespace nncore;
using namespace test;
using namespace opr;
using namespace opr::naive;

using F = NDArrayFactory;
using Param = param::transpose;

TEST(Naive, Transpose) {
  OpNaiveImpl oprs;

  // Group 1
  Tensor inp1 =
      F::from_list({116,  -50, 79,  -180, -28,  -96, -165, -27,  -2,  10,
                    -176, 113, -30, 122,  -116, -51, -48,  -142, 198, -108},
                   {4, 5}, dtype::Int32());
  Tensor truth1 =
      F::from_list({116, -96,  -176, -51, -50, -165, 113, -48, 79,   -27,
                    -30, -142, -180, -2,  122, 198,  -28, 10,  -116, -108},
                   {5, 4}, dtype::Int32());
  Param p1(0, 1);

  Tensor pred1;
  ASSERT_TRUE(oprs.transpose(inp1, pred1, p1).is_ok());
  assert_same_data<nn_int32>(pred1, truth1, 0.0001f);

  // Group 2
  Tensor inp2 = F::from_list(
      {-149, 141, 6,    -5,   47,   -183, 95,  53,   -149, -129, 186,  99,
       21,   84,  -14,  175,  -53,  62,   140, 59,   -14,  50,   -169, -189,
       61,   -7,  129,  -125, 120,  -109, 118, 162,  -80,  58,   -91,  115,
       127,  173, -140, -95,  0,    192,  66,  -83,  -188, -29,  -92,  -145,
       -6,   6,   -149, 159,  155,  93,   -74, -147, -37,  182,  123,  -49,
       112,  -23, -157, -73,  -182, -120, -45, 31,   -119, -2,   18,   -199},
      {3, 4, 6}, dtype::Int32());
  Tensor truth2 = F::from_list(
      {-149, 61,   -6,   95,   118, -74,  21,  127,  112,  140,  66,   -45,
       141,  -7,   6,    53,   162, -147, 84,  173,  -23,  59,   -83,  31,
       6,    129,  -149, -149, -80, -37,  -14, -140, -157, -14,  -188, -119,
       -5,   -125, 159,  -129, 58,  182,  175, -95,  -73,  50,   -29,  -2,
       47,   120,  155,  186,  -91, 123,  -53, 0,    -182, -169, -92,  18,
       -183, -109, 93,   99,   115, -49,  62,  192,  -120, -189, -145, -199},
      {6, 4, 3}, dtype::Int32());
  Param p2(0, 2);

  Tensor pred2;
  ASSERT_TRUE(oprs.transpose(inp2, pred2, p2).is_ok());
  assert_same_data<nn_int32>(pred2, truth2, 0.0001f);

  // Group 3
  Tensor inp3 = F::from_list(
      {-184.47836822007747, -135.77934833640774, -131.5692045780147,
       -139.88637591883548, 7.378481161197385,   -194.85200685695676,
       124.72624465928914,  135.32088057645922,  -149.63309464031306,
       5.068530645297187,   -52.609905261884194, -5.83477677509191,
       -121.05109868593935, -133.2874615589557,  -108.08990561152387,
       26.347047463464122,  -65.70184395799768,  97.66633377665073,
       68.78419424070898,   181.3987014174778,   -17.19642705834329,
       -177.23101755020787, 126.42885351936985,  77.86682388216076,
       -91.77207240374065,  -195.63750250530325, -139.38054574551325,
       -150.04838481717218, -166.67773021921147, -93.0514518842402,
       -157.03624051832935, 60.03739681630253,   -184.79994903860072,
       20.311576166940227,  -15.716149646852216, 147.9009927690924,
       152.8980211985887,   -195.4208022280849,  98.5139649928654,
       16.655507860783615},
      {2, 1, 4, 5}, dtype::Float64());
  Tensor truth3 = F::from_list(
      {-184.47836822007747, -17.19642705834329,  -135.77934833640774,
       -177.23101755020787, -131.5692045780147,  126.42885351936985,
       -139.88637591883548, 77.86682388216076,   7.378481161197385,
       -91.77207240374065,  -194.85200685695676, -195.63750250530325,
       124.72624465928914,  -139.38054574551325, 135.32088057645922,
       -150.04838481717218, -149.63309464031306, -166.67773021921147,
       5.068530645297187,   -93.0514518842402,   -52.609905261884194,
       -157.03624051832935, -5.83477677509191,   60.03739681630253,
       -121.05109868593935, -184.79994903860072, -133.2874615589557,
       20.311576166940227,  -108.08990561152387, -15.716149646852216,
       26.347047463464122,  147.9009927690924,   -65.70184395799768,
       152.8980211985887,   97.66633377665073,   -195.4208022280849,
       68.78419424070898,   98.5139649928654,    181.3987014174778,
       16.655507860783615},
      {4, 1, 5, 2}, dtype::Float64());
  Param p3({0, 2});

  Tensor mid3, pred3;
  ASSERT_TRUE(oprs.transpose(inp3, mid3, Param(0, 2)).is_ok());
  ASSERT_TRUE(oprs.transpose(mid3, pred3, Param(2, 3)).is_ok());
  assert_same_data<nn_float64>(pred3, truth3, 0.0001f);
}